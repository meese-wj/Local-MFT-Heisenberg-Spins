"""
This code houses the helper functions for the
Heisenberg J‚ÇÅ-J‚ÇÇ model with magnetoelastic
coupling, a nematic anisotropy, and uniaxial
anisotropy.
"""

include("Heisenberg_J1-J2_Model.jl")

struct MagElastic_Stripe_Params
    J1J2_params::J1_J2_ModelParameters
    Œª::Float64
    Œµ::Float64
    Œ≥::Float64
end

"""
Initialize a J1-J2 lattice with random spins, but fix the boundary 
in the stripe configuration
"""
function initialize_spins!( lattice_spins, latt_params, model_params::MagElastic_Stripe_Params )
    initialize_spins!(lattice_spins, latt_params, model_params.J1J2_params)
end

"""
Calculate the uniaxial anisotropy component to the effective field.
    
    ùê°eff = -Œ≥S·∂ªÃÇe¬≥, so Œ≥ < 0 pulls the spins towards the z axis
"""
uniaxial_anisotropy_field( spin::Spin3, model_params::MagElastic_Stripe_Params ) = -model_params.Œ≥ * projz( spin )

"""
Calculate the nematic anisotropy component to the effective field.
    
    ùê°eff = -Œµ( ùêí·µ¢‚Çä‚Çì - ùêí·µ¢‚Çäy ), 

so Œµ < 0 pulls the spins towards the horizontal stripe state with 
ordering vector ùêê = (0, œÄ).
"""
function nematic_anisotropy_field( site, lattice_spins, model_params::MagElastic_Stripe_Params, nearest_neighbors )
    eff_field =  lattice_spins[ nearest_neighbors[site, 1] ] + lattice_spins[ nearest_neighbors[site, 2] ]
    eff_field -= lattice_spins[ nearest_neighbors[site, 3] ] + lattice_spins[ nearest_neighbors[site, 4] ]
    return -model_params.Œµ * eff_field
end

"""
Calculate the magnetoelastic anisotropy component to the effective 
field.
    
    ùê°eff = -Œª( S·µ¢‚Çä‚ÇìÀ£ ÃÇeÀ£ + S·µ¢‚Çäy ∏ ÃÇe ∏ )

so Œª < 0 pulls the spins towards the horizontal stripe state with 
ordering vector ùêê = (0, œÄ) and spin projection ÃÇeÀ£, or towards the 
vertical stripe state with ùêê = (œÄ, 0) and spin projection ÃÇe ∏.
"""
function magnetoelastic_anisotropy_field( site, lattice_spins, model_params::MagElastic_Stripe_Params, nearest_neighbors )
    eff_field =  projx( lattice_spins[ nearest_neighbors[site, 1] ] ) + projx( lattice_spins[ nearest_neighbors[site, 2] ] )
    eff_field += projy( lattice_spins[ nearest_neighbors[site, 3] ] ) + projy( lattice_spins[ nearest_neighbors[site, 4] ] )
    return -model_params.Œª * eff_field
end